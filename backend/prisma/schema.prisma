// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:/api.db"
}


model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  username    String  
  password    String
  created_at  DateTime    @default(now()) 
  likes       Like[]      @relation("UserLikes")
  users       Friend[]    @relation("FriendUser") 
  friends     Friend[]    @relation("UserFriends")
  chats       Chat[]      @relation("UserChats")
  posts       Post[]      @relation("UserPosts")
  messages    Message[]   @relation("UserMessages")
  @@unique([id, username])
}


model Friend {
  id                Int             @id @default(autoincrement())
  user_id           Int
  friend_id         Int
  sender_id         Int?
  confirm_status    Boolean         @default(false)
  created_at        DateTime        @default(now())
  chats             Chat[]          @relation("FriendChats")
  friend            User            @relation("FriendUser", fields: [friend_id], references: [id])
  user              User            @relation("UserFriends", fields: [user_id], references: [id])
  @@unique([user_id, friend_id])
}

model Chat {
  id          Int      @id @default(autoincrement())
  user_id     Int
  friend_id   Int
  created_at  DateTime @default(now())
  messages    Message[] @relation("ChatMessages")
  
  user        User     @relation("UserChats", fields: [user_id], references: [id])
  friend      Friend   @relation("FriendChats", fields: [friend_id], references: [id])
  
  @@unique([user_id, friend_id])
}

model Message {
  id          Int       @id @default(autoincrement())
  chat_id     Int
  sender_id   Int
  content     String
  chat        Chat      @relation("ChatMessages", fields: [chat_id], references: [id])
  sender      User      @relation("UserMessages", fields: [sender_id], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
}

model Post {
  id              Int         @id @default(autoincrement())
  title           String  
  content         String
  description     String
  author_id       Int         
  update_at       DateTime    @default(now()) 
  created_at      DateTime    @default(now())
  user            User        @relation("UserPosts", fields: [author_id], references: [id])
  tags            Tag[]       @relation("PostTags")
  comments        Comment[]   @relation("PostComments")
  likes           Like[]      @relation("PostLikes")
}

model Comment {
  id              Int      @id @default(autoincrement())
  post_id         Int 
  author_id       Int 
  author_name     String
  text            String
  posts           Post      @relation("PostComments", fields: [post_id], references: [id])
  update_at       DateTime  @default(now()) 
  created_at      DateTime  @default(now())
  @@unique([author_id, post_id])
}

model Like {
  id        Int   @id @default(autoincrement())
  userId    Int
  postId    Int
  user      User  @relation("UserLikes", fields: [userId], references: [id])
  post      Post  @relation("PostLikes", fields: [postId], references: [id])
  
  @@unique([userId, postId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostTags")
}

